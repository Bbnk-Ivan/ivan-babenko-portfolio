let
    // Загрузка данных из файла Excel
    Источник = Excel.Workbook(
        File.Contents("......"), 
        null, 
        true
    ),

    // Выбор нужного листа
    ЛистМотивации = Источник{[Item="Единый отчёт мотивации",Kind="Sheet"]}[Data],
    
    // Установка заголовков таблицы
    Заголовки = Table.PromoteHeaders(ЛистМотивации, [PromoteAllScalars=true]),
    
    // Преобразование типов данных для всех колонок
    ПреобразованныеТипы = Table.TransformColumnTypes(
        Заголовки,
        {
            {"Наименование РЦ", type text},
            {"ФИО сотрудника", type text},
            {"GUID_1C", type text},
            {"КИС_КОД", type text},
            {"Тип персонала", type text},
            {"Дата трудоустройства", Int64.Type},
            {"Подразделение по ШР", type text},
            {"Должность по ШР", type text},
            {"Стаж работы, в мес", Int64.Type},
            {"Дата смены", type number},
            {"Наименование смены", type text},
            {"Начало смены", type time},
            {"Завершение смены", type time},
            {"Тип смены", type text},
            {"Время по табелю, час", type any},
            {"Время смены по графику, час", type number},
            {"Время начала выполнения первого задания", type number},
            {"Время окончания выполнения последнего задания", type number},
            {"Время общее терминал, час", type number},
            {"Время активное терминал, час", type any},
            {"Время фактическое операции, час", type number},
            {"Время простоя, всего, в час.", type number},
            {"Тип задания", type text},
            {"Подтип задания", type text},
            {"Тип работ", type text},
            {"Тип отборки", type text},
            {"Кол-во операций", Int64.Type},
            {"Детали", type text},
            {"Комментарии", type any},
            {"Тип техники", type text},
            {"Тип операции", type any},
            {"Время нормативное, час", type number},
            {"Превышение нормативного времени над временем по графику, час", type number},
            {"Выполнение норматива всего по времени, %", type number},
            {"Норма количества заданий", type number},
            {"Условия труда", type any},
            {"ИТСД", type text},
            {"Кол-во коробок", type number},
            {"Кол-во операций тележка", Int64.Type},
            {"Кол-во операций термобокс", Int64.Type},
            {"Кол-во операций паллет", Int64.Type},
            {"Кол-во операций термо-чехол", Int64.Type},
            {"Кол-во операций тара прочее", type any},
            {"Кол-во рядов", Int64.Type},
            {"Кол-во ТП", Int64.Type},
            {"Пробег", type number}
        }
    ),
    
    // Выбор только нужных колонок
    ВыбранныеКолонки = Table.SelectColumns(
        ПреобразованныеТипы,
        {"Дата смены", "Тип отборки", "Детали", "Кол-во коробок"}
    ),
    
    // Фильтрация только строк с деталями "Заданий"
    ФильтрЗаданий = Table.SelectRows(
        ВыбранныеКолонки, 
        each ([Детали] = "Заданий")
    ),
    
    // Преобразование даты смены в правильный формат
    ПреобразованиеДаты = Table.TransformColumnTypes(
        ФильтрЗаданий,
        {{"Дата смены", type date}}
    ),
    
    // Разделение колонки "Тип отборки" по разделителю "-"
    РазделениеТипаОтборки = Table.SplitColumn(
        ПреобразованиеДаты, 
        "Тип отборки", 
        Splitter.SplitTextByEachDelimiter({"-"}, QuoteStyle.Csv, false), 
        {"Тип отборки.1", "Тип отборки.2"}
    ),
    
    // Преобразование типов для новых колонок
    ПреобразованиеТиповОтборки = Table.TransformColumnTypes(
        РазделениеТипаОтборки,
        {
            {"Тип отборки.1", type text},
            {"Тип отборки.2", type text}
        }
    ),
    
    // Удаление ненужных колонок
    УдаленныеКолонки = Table.RemoveColumns(
        ПреобразованиеТиповОтборки,
        {"Тип отборки.2", "Детали"}
    ),
    
    // Фильтрация исключений по типу отборки
    ФильтрТиповОтборки = Table.SelectRows(
        УдаленныеКолонки,
        each ([Тип отборки.1] <> "Арбуз" and [Тип отборки.1] <> "Витрина")
    ),
    
    // Добавление временной метки обработки
    ДобавлениеВремениОбработки = Table.AddColumn(
        ФильтрТиповОтборки,
        "Время обработки",
        each DateTime.LocalNow()
    ),
    
    // Добавление колонки с датой (без времени)
    ДобавлениеДаты = Table.AddColumn(
        ДобавлениеВремениОбработки,
        "Дата обработки",
        each DateTime.Date([Время обработки]),
        type date
    ),
    
    // Расчет разницы между датой обработки и датой смены
    РасчетРазницыДат = Table.AddColumn(
        ДобавлениеДаты,
        "Разница дней",
        each [Дата обработки] - [Дата смены]
    ),
    
    // Фильтрация данных за последние 15 дней
    ФильтрПоДате = Table.SelectRows(
        РасчетРазницыДат,
        each [Разница дней] >= #duration(1, 0, 0, 0) and [Разница дней] <= #duration(15, 0, 0, 0)
    ),
    
    // Удаление временных служебных колонок
    УдалениеВременныхКолонок = Table.RemoveColumns(
        ФильтрПоДате,
        {"Время обработки", "Дата обработки", "Разница дней"}
    ),
    
    // Очистка значений в колонке "Тип отборки.1" (удаление " PBL")
    ОчисткаТипаОтборки = Table.ReplaceValue(
        УдалениеВременныхКолонок,
        " PBL",
        "",
        Replacer.ReplaceText,
        {"Тип отборки.1"}
    )
in
    ОчисткаТипаОтборки